package com.briskpe.tests;

import org.testng.Assert;
import org.testng.annotations.Test;

public class DashBoardTest extends BaseTest {

    @Test(priority = 1, groups = "requiresLogin")
    public void testDashboardElements() {
        getTest().info("üß™ Verifying Dashboard Landing Elements...");
        Assert.assertTrue(dash.isPendingActionVisible(), "‚ùå Pending Action not visible");
        Assert.assertTrue(dash.isQuickActionDropdownVisible(), "‚ùå Quick Action Button not visible");
        Assert.assertTrue(dash.isNotificationIconVisible(), "‚ùå Notification icon not visible");
        getTest().pass("‚úÖ Dashboard basic elements are displayed correctly.");
    }

    @Test(priority = 2, groups = "requiresLogin")
    public void verifyUserCanNavigateToSideMenuItems() {
        getTest().info("üîç Clicking Pending Action...");
        Assert.assertTrue(dash.isPendingActionVisible(), "‚ùå Pending Action not visible");
        dash.clickPendingAction();
        Assert.assertTrue(dash.isPendingActionPageVisible(), "‚ùå Pending Action page did not load");

        getTest().info("üîç Clicking Received Payments...");
        Assert.assertTrue(dash.isReceivedPaymentVisible(), "‚ùå Received Payment not visible");
        dash.clickReceivedPayment();
        Assert.assertTrue(dash.isReceivedPaymentPageVisible(), "‚ùå Received Payment page did not load");

        getTest().info("üîç Clicking Requested Payments...");
        Assert.assertTrue(dash.isRequestedPaymentVisible(), "‚ùå Requested Payment not visible");
        dash.clickRequestedPayment();
        Assert.assertTrue(dash.isRequestedPaymentPageVisible(), "‚ùå Requested Payment page did not load");

        getTest().info("üîç Clicking Payment Links...");
        Assert.assertTrue(dash.isPaymentLinkVisible(), "‚ùå Payment Link not visible");
        dash.clickPaymentLink();
        Assert.assertTrue(dash.isPaymentLinkPageVisible(), "‚ùå Payment Link page did not load");

        getTest().pass("‚úÖ All side menu navigations verified successfully.");
    }

    // Reusable helper for testing quick action options
    private void verifyQuickActionNavigation(String optionText, Runnable clickVerifyPageVisible, String errorMessage) {
        getTest().info("üîΩ Clicking Quick Action Drop Down...");
        Assert.assertTrue(dash.isQuickActionDropdownVisible(), "‚ùå Quick Action Button not visible");
        dash.isQuickActionDropdownVisible();

        Assert.assertTrue(dash.isQuickActionOptionVisible(optionText), "‚ùå Option '" + optionText + "' not visible");
        dash.clickQuickActionOption(optionText);

        // Run the passed verification lambda to check page visibility
        clickVerifyPageVisible.run();

        getTest().pass("‚úÖ '" + optionText + "' page opened successfully.");
    }

    @Test(priority = 3, groups = "requiresLogin")
    public void verifyNavigationToShareVirtualAccountDetailsThroughQuickActions() {
        verifyQuickActionNavigation(
                "Share Virtual Account Details",
                () -> {}, // No page visibility assertion included here (assumed handled inside page method)
                "Share Virtual Account Details page not visible"
        );
    }

    @Test(priority = 4, groups = "requiresLogin")
    public void verifyNavigationToCreatePaymentRequestsThroughQuickActions() {
        verifyQuickActionNavigation(
                "Create Payment Request",
                () -> Assert.assertTrue(dash.isCreatePaymentRequestPageVisible(), "‚ùå Create Payment Request page not visible"),
                "Create Payment Request page not visible"
        );
    }

    @Test(priority = 5, groups = "requiresLogin")
    public void verifyNavigationToCreatePaymentLinkThroughQuickActions() {
        verifyQuickActionNavigation(
                "Create Payment Link",
                () -> Assert.assertTrue(dash.isCreatePaymentLinkPageVisible(), "‚ùå Create Payment Link page not visible"),
                "Create Payment Link page not visible"
        );
    }

    @Test(priority = 6, groups = "requiresLogin")
    public void verifyNavigationToAddPayerThroughQuickActions() {
        verifyQuickActionNavigation(
                "Add Payer",
                () -> Assert.assertTrue(dash.isAddPayerPageVisible(), "‚ùå Add Payer page not visible"),
                "Add Payer page not visible"
        );
    }

    @Test(priority = 7, groups = "requiresLogin")
    public void verifyNavigationToCreateInvoiceThroughQuickActions() {
        verifyQuickActionNavigation(
                "Create Invoice",
                () -> Assert.assertTrue(dash.isCreateInvoicePageVisible(), "‚ùå Create Invoice page not visible"),
                "Create Invoice page not visible"
        );
    }

    @Test(priority = 8, groups = "requiresLogin")
    public void verifyNavigationToDownloadStatementThroughQuickActions() {
        verifyQuickActionNavigation(
                "Download Statement",
                () -> Assert.assertTrue(dash.isDownloadStatementPageVisible(), "‚ùå Download Statement page not visible"),
                "Download Statement page not visible"
        );
    }

    @Test(priority = 9, groups = "requiresLogin")
    public void verifyNavigateToNotificationCenterPageAfterClickingOnNotificationIcon() {
        getTest().info("üîî Clicking Notification Icon...");
        Assert.assertTrue(dash.isNotificationIconVisible(), "‚ùå Notification icon not visible");
        dash.clickNotificationIcon();
        Assert.assertTrue(dash.isNotificationPopupVisible(), "‚ùå Notification popup not visible");
        getTest().pass("‚úÖ Notification popup displayed successfully.");
    }
}
