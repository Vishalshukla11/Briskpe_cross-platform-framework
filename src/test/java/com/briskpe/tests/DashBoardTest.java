package com.briskpe.tests;

import org.testng.Assert;
import org.testng.annotations.Test;

public class DashBoardTest extends BaseTest {

    @Test(priority = 1, groups = "requiresLogin")
    public void testDashboardElements() {
        test.info("üß™ Verifying Dashboard Landing Elements...");
        Assert.assertTrue(dash.isPendingActionVisible(), "‚ùå Pending Action not visible");
        Assert.assertTrue(dash.isQuickActionButtonVisible(), "‚ùå Quick Action Button not visible");
        Assert.assertTrue(dash.isNotificationIconVisible(), "‚ùå Notification icon not visible");
        test.pass("‚úÖ Dashboard basic elements are displayed correctly.");
    }

    @Test(priority = 2, groups = "requiresLogin")
    public void verifyUserCanNavigateToSideMenuItems() {
        test.info("üîç Clicking Pending Action...");
        Assert.assertTrue(dash.isPendingActionVisible(), "‚ùå Pending Action not visible");
        dash.clickPendingAction();
        Assert.assertTrue(dash.isPendingActionPageVisible(), "‚ùå Pending Action page did not load");

        test.info("üîç Clicking Received Payments...");
        Assert.assertTrue(dash.isReceivedPaymentVisible(), "‚ùå Received Payment not visible");
        dash.clickReceivedPayment();
        Assert.assertTrue(dash.isReceivedPaymentPageVisible(), "‚ùå Received Payment page did not load");

        test.info("üîç Clicking Requested Payments...");
        Assert.assertTrue(dash.isRequestedPaymentVisible(), "‚ùå Requested Payment not visible");
        dash.clickRequestedPayment();
        Assert.assertTrue(dash.isRequestedPaymentPageVisible(), "‚ùå Requested Payment page did not load");

        test.info("üîç Clicking Payment Links...");
        Assert.assertTrue(dash.isPaymentLinkVisible(), "‚ùå Payment Link not visible");
        dash.clickPaymentLink();
        Assert.assertTrue(dash.isPaymentLinkPageVisible(), "‚ùå Payment Link page did not load");

        test.pass("‚úÖ All side menu navigations verified successfully.");
    }

    @Test(priority = 3, groups = "requiresLogin")
    public void verifyNavigationToShareVirtualAccountDetailsThroughQuickActions() {
        test.info("üîΩ Clicking Quick Action Drop Down...");
        Assert.assertTrue(dash.isQuickActionButtonVisible(), "‚ùå Quick Action Button not visible");
        dash.ClickQuickActionButton();
        Assert.assertTrue(dash.isQuickActionOptionVisible("Share Virtual Account Details"), "‚ùå Option not visible");
        dash.ClickQuickActionOption("Share Virtual Account Details");
        test.pass("‚úÖ Share Virtual Account Details opened successfully.");
    }

    @Test(priority = 4, groups = "requiresLogin")
    public void verifyNavigationToCreatePaymentRequestsThroughQuickActions() {
        test.info("üîΩ Clicking Quick Action Drop Down...");
        Assert.assertTrue(dash.isQuickActionButtonVisible(), "‚ùå Quick Action Button not visible");
        dash.ClickQuickActionButton();
        Assert.assertTrue(dash.isQuickActionOptionVisible("Create Payment Request"), "‚ùå Option not visible");
        dash.ClickQuickActionOptions("Create Payment Request");
        Assert.assertTrue(dash.isCreatePaymentRequestPageVisible(), "‚ùå Page not visible");
        test.pass("‚úÖ Create Payment Request opened successfully.");
    }

    @Test(priority = 5, groups = "requiresLogin")
    public void verifyNavigationToCreatePaymentLinkThroughQuickActions() {
        test.info("üîΩ Clicking Quick Action Drop Down...");
        Assert.assertTrue(dash.isQuickActionButtonVisible(), "‚ùå Quick Action Button not visible");
        dash.ClickQuickActionButton();
        Assert.assertTrue(dash.isQuickActionOptionVisible("Create Payment Link"), "‚ùå Option not visible");
        dash.ClickQuickActionOptions("Create Payment Link");
        Assert.assertTrue(dash.isCreatePaymentLinkPageVisible(), "‚ùå Page not visible");
        test.pass("‚úÖ Create Payment Link opened successfully.");
    }

    @Test(priority = 6, groups = "requiresLogin")
    public void verifyNavigationToAddPayerThroughQuickActions() {
        test.info("üîΩ Clicking Quick Action Drop Down...");
        Assert.assertTrue(dash.isQuickActionButtonVisible(), "‚ùå Quick Action Button not visible");
        dash.ClickQuickActionButton();
        Assert.assertTrue(dash.isQuickActionOptionVisible("Add Payer"), "‚ùå Option not visible");
        dash.ClickQuickActionOptions("Add Payer");
        Assert.assertTrue(dash.isAddPayerPageVisible(), "‚ùå Page not visible");
        test.pass("‚úÖ Add Payer page opened successfully.");
    }

    @Test(priority = 7, groups = "requiresLogin")
    public void verifyNavigationToCreateInvoiceThroughQuickActions() {
        test.info("üîΩ Clicking Quick Action Drop Down...");
        Assert.assertTrue(dash.isQuickActionButtonVisible(), "‚ùå Quick Action Button not visible");
        dash.ClickQuickActionButton();
        Assert.assertTrue(dash.isQuickActionOptionVisible("Create Invoice"), "‚ùå Option not visible");
        dash.ClickQuickActionOptions("Create Invoice");
        Assert.assertTrue(dash.isCreateInvoicePageVisible(), "‚ùå Page not visible");
        test.pass("‚úÖ Create Invoice page opened successfully.");
    }

    @Test(priority = 8, groups = "requiresLogin")
    public void verifyNavigationToDownloadStatementThroughQuickActions() {
        test.info("üîΩ Clicking Quick Action Drop Down...");
        Assert.assertTrue(dash.isQuickActionButtonVisible(), "‚ùå Quick Action Button not visible");
        dash.ClickQuickActionButton();
        Assert.assertTrue(dash.isQuickActionOptionVisible("Download Statement"), "‚ùå Option not visible");
        dash.ClickQuickActionOptions("Download Statement");
        Assert.assertTrue(dash.isDownloadStatementPageVisible(), "‚ùå Page not visible");
        test.pass("‚úÖ Download Statement page opened successfully.");
    }

    @Test(priority = 9, groups = "requiresLogin")
    public void verifyNavigateToNotificationCenterpageAfterclickingOnNotificationIcon() {
        test.info("üîî Clicking Notification Icon...");
        Assert.assertTrue(dash.isNotificationIconVisible(), "‚ùå Notification icon not visible");
        dash.clickNotificationIcon();
        Assert.assertTrue(dash.isNotificationPopupVisible(), "‚ùå Notification popup not visible");
        test.pass("‚úÖ Notification popup displayed successfully.");
    }
}
